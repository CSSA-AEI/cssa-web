{"version":3,"file":"static/js/450.a8828a51.chunk.js","mappings":"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","sources":["pages/Home/CircularCarousel.tsx","pages/Home/HomeLayer2.tsx"],"sourcesContent":["import React, { useRef, useState, useEffect} from \"react\";\nimport './circular-carousel.css';\n\ninterface CircularCarouselProps {\n  flexDirection: string;\n  getCurrentMember: (value:  any) => void;\n  images: any[];\n}\n\nconst CircularCarousel: React.FC<CircularCarouselProps> = ({flexDirection, getCurrentMember, images}) => {\n\n    const wheelRef = useRef<any>(null);\n    const initialSlidesState = images.map((slide, index) => ({\n        coords: {\n          x: 0,\n          y: 0\n        },\n        theta: 0,\n        index: index + 1,\n        image: slide.frontImage,\n        name: slide.name,\n        blurb: slide.blurb,\n        position: slide.position,\n        year: slide.year\n    }));\n\n    const numSlides = images.length;\n    const angle = 360 / numSlides;\n\n    const [slides, setSlides] = useState(initialSlidesState);\n    const [activeSlide, setActiveSlide] = useState(slides[0]);\n    const [wheelWidth, setWheelWidth] = useState(0);\n    const [center, setCenter] = useState({ x: 0, y: 0 });\n    const [rotate, setRotate] = useState(0);\n\n    const getInitialPositions = () => {\n        const center = {\n          x: parseFloat(getComputedStyle(wheelRef.current.parentNode).width) / 2 - parseFloat(getComputedStyle(wheelRef.current).width) /2,\n          y: parseFloat(getComputedStyle(wheelRef.current.parentNode).height) / 2 - parseFloat(getComputedStyle(wheelRef.current).height) /2\n        };\n        setCenter(center);\n        setWheelWidth(parseFloat(getComputedStyle(wheelRef.current.parentNode).width));\n    };\n\n    useEffect(() => {\n        if (!wheelRef.current) {\n          return;\n        }\n        getInitialPositions();\n        window.addEventListener(\"resize\", getInitialPositions);\n        return () => window.removeEventListener(\"resize\", getInitialPositions);\n    }, []);\n    \n    useEffect(() => {\n        if (!wheelWidth) {\n          return;\n        }\n    \n        let positionedSlides = slides.map((slide, index) => {\n            \n            // Calculate angle increment based on total slides,\n            //we're doing this in radians for simplification\n            const angleIncrement = (2 * Math.PI) / slides.length;\n            var newTheta = angleIncrement * index;\n\n            //This is done so the middle one is highlighted and not the top one\n            if(flexDirection === 'row'){\n              newTheta = angleIncrement * (index - 1);\n            }\n            // Calculate angle for current slide\n\n            const wheelRadius = wheelWidth / 2;\n            var y = -wheelRadius * Math.cos(newTheta); // Calculate x-coordinatewheel\n            var x = -wheelRadius * Math.sin(newTheta); // Calculate y-coordinate \n\n            return {\n                ...slide,\n                coords: { x: y, y: x }\n            };\n        });\n    \n        setSlides(positionedSlides);\n    }, [wheelWidth, flexDirection]);\n    \n    const handleSlideClick = (e: any) => {\n        const nextIndex = parseFloat(e.currentTarget.dataset.index);\n        const currentIndex = activeSlide.index;\n    \n        setActiveSlide(slides[nextIndex - 1]);\n        getCurrentMember(slides[nextIndex - 1])\n    \n        let numOfRotations = nextIndex - currentIndex;\n    \n        if (numOfRotations < -numSlides / 2) {\n          numOfRotations = numOfRotations + numSlides;\n        }\n    \n        if (numOfRotations > numSlides / 2) {\n          numOfRotations = numOfRotations - numSlides;\n        }\n    \n        setRotate((prevRotate) => prevRotate + angle * numOfRotations);\n    };\n\n    if(flexDirection === 'column'){\n      return (\n        <div className=\"container\">\n          <div className=\"wheel\" style={{ transform: `translate(0%, 20%) rotate(${rotate}deg)`}}>\n            <div className=\"wheel-border\" style={{transform: `translate(0%, 30%) rotate(${rotate}deg)`}}></div>\n            {slides &&\n            slides.map((slide, index) => {\n              return (\n                <div\n                  onClick={(e) => {handleSlideClick(e);}}\n                  key={index}\n                  ref={wheelRef}\n                  className={`slide ${slide.index === activeSlide.index ? 'active-mobile' : ''}`}\n                  data-index={index + 1}\n                  style={{\n                    top: center.x + slide.coords.x,\n                    left: center.y + slide.coords.y,\n                    transform: `rotate(${-rotate}deg)`\n                  }}\n                >\n                  <img src={slide.image} alt='cssa member'/>\n                </div>\n              );\n            })}\n          </div>\n    \n        </div>\n      );\n    }\n\n    return (\n      <div className=\"container\">\n        <div className=\"wheel\" style={{ transform: `translate(-45%, 10%) rotate(${rotate}deg)`}}>\n          <div className=\"wheel-border\" style={{transform: `rotate(${rotate}deg)`}}></div>\n          {slides &&\n          slides.map((slide, index) => {\n            return (\n              <div\n                onClick={(e) => {handleSlideClick(e);}}\n                key={index}\n                ref={wheelRef}\n                className={`slide ${slide.index === activeSlide.index ? 'active-landscape' : ''}`}\n                data-index={index + 1}\n                style={{\n                  top: center.x + slide.coords.x,\n                  left: center.y + slide.coords.y,\n                  transform: `translate(0%, 0%) rotate(${-rotate}deg)`,\n                  height: `8vw`,\n                  width: `8vw`\n                }}\n              >\n                <img src={slide.image} alt='cssa member'/>\n              </div>\n            );\n          })}\n        </div>\n  \n      </div>\n    );\n};\n  \nexport default CircularCarousel;","import React, {useState} from 'react';\nimport { Link } from \"react-router-dom\";\nimport CircularCarousel from './CircularCarousel';\nimport BinaryBackground from './BinaryBackground';\nimport { teamInfo } from '../../resources/teamImagesInfo';\nimport './home-layer-2.css';\nimport { useTranslation } from 'react-i18next';\n\ninterface HomeLayer2Props {\n    windowDimensions: { width: number; height: number };\n}\n\nconst HomeLayer2: React.FC<HomeLayer2Props> = ({windowDimensions}) => {\n\n    //The below part of the code is for the display when we have a portrait screen, i.e phones and tablets\n\n    const [currentMember, setCurrentMember] = useState(teamInfo[0]);\n    const { t } = useTranslation();\n\n    if(windowDimensions.width / windowDimensions.height <= 1){\n        return(\n            <div className='home-layer-2-container'>\n                <div className='home-layer-2-title'>\n                    <div className='sliding-numbers-container'>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                    </div>\n                    {t(\"MEET THE TEAM\")}\n                    <div className='sliding-numbers-container'>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                    </div>\n                </div>\n                <div className='meet-the-team-blurb'> \n                    <p>\n                    {t(\"The CSSA is student elected student organization dedicated to advocating for Computer Science Students at the University of Ottawa.\")}\n                    </p>\n                    <p>\n                        {t(\"Check out some of our members below.\")}\n                    </p>\n                    <Link to='/about'><button>{t(\"Learn More\")}</button></Link>\n                </div>\n                <div className='meet-the-team-container'>\n                    <div className='tv-screen'>\n                        <div className='tv-rims'>\n                            <div className='tv-content'>\n                                <p>{currentMember.name}</p>\n                                <p>{currentMember.position}</p>\n                                <p>{currentMember.year}</p>\n                                <p>{currentMember.blurb}</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <CircularCarousel flexDirection='column' getCurrentMember={setCurrentMember} images={teamInfo}/>\n                <BinaryBackground />\n            </div>\n        )\n\n    }\n\n    return(\n        <div className='home-layer-2-container'>\n            <div className='meet-the-team-container'>\n                <div className='home-layer-2-title'>\n                    <div className='sliding-numbers-container'>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                    </div>\n                    <div className='meet-team-header'>{t(\"MEET THE TEAM\")}</div>\n                    <div className='sliding-numbers-container'>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                        <span className='digits'>01000011 ~~ 01010011 ~~ 01010011 ~~ 01000001 ~~ </span>\n                    </div>\n                </div>\n                <div className='meet-the-team-blurb'> \n                    <p>{t(\"The CSSA is student elected student organization dedicated to advocating for Computer Science Students at the University of Ottawa.\")}</p>\n                    <p>\n                        {t(\"Check out some of our members below.\")}\n                    </p>\n                    <Link to='/about'><button>{t(\"Learn More\")}</button></Link>\n                </div>\n                <CircularCarousel flexDirection='row' getCurrentMember={setCurrentMember} images={teamInfo}/>\n            </div>\n            <div className='tv-screen-container'>\n                <div className='tv-screen'>\n                    <div className='tv-rims'>\n                        <div className='tv-content'>\n                            <div>\n                                <p>{currentMember.name}</p>\n                                <p>{currentMember.position}</p>\n                                <p>{currentMember.year}</p>\n                            </div>\n                            \n                            <p>{currentMember.blurb}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <BinaryBackground />\n        </div>\n    )\n};\n\nexport default HomeLayer2;"],"names":["_ref","flexDirection","getCurrentMember","images","wheelRef","useRef","initialSlidesState","map","slide","index","coords","x","y","theta","image","frontImage","name","blurb","position","year","numSlides","length","angle","slides","setSlides","useState","activeSlide","setActiveSlide","wheelWidth","setWheelWidth","center","setCenter","rotate","setRotate","getInitialPositions","parseFloat","getComputedStyle","current","parentNode","width","height","useEffect","window","addEventListener","removeEventListener","positionedSlides","angleIncrement","Math","PI","newTheta","wheelRadius","cos","sin","handleSlideClick","e","nextIndex","currentTarget","dataset","currentIndex","numOfRotations","prevRotate","_jsx","className","children","_jsxs","style","transform","concat","onClick","ref","top","left","src","alt","windowDimensions","currentMember","setCurrentMember","teamInfo","t","useTranslation","Link","to","CircularCarousel","BinaryBackground"],"sourceRoot":""}